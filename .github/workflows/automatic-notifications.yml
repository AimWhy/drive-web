name: Notify Releases
on:
  push:
    branches: [master]

jobs:
  change-package-json-and-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Get latest version
        id: latest_version
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: tags } = await github.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const latestTag = tags[0].name;
            const versionParts = latestTag.split('.');
            const nextVersion = `${versionParts[0]}.${versionParts[1]}.${parseInt(versionParts[2]) + 1}`;
            console.log(`Latest version: ${latestTag}, Next version: ${nextVersion}`);
            core.setOutput('next_version', nextVersion)
  
      - name: Update package.json version
        uses: jossef/action-set-json-field@v2.1
        with:
          file: package.json
          field: version
          value: ${{  steps.latest_version.outputs.next_version }}
          
      - name: Commit updated package.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "docs(): update package ${{ steps.latest_version.outputs.next_version }}"
          git tag ${{ steps.latest_version.outputs.next_version }}

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.CI_USER_GH_TOKEN }}
          tags: true
          branch: master
          force: true

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.latest_version.outputs.next_version }}
          release_name: ${{ steps.latest_version.outputs.next_version }}
          body_path: ./last_release.txt
          draft: false
          prerelease: false            

          
  get-latest-tag:
    runs-on: ubuntu-latest
    needs: change-package-json-and-release 
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Get latest tag 
        id: latest-tag
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: tags } = await github.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const latestTag = tags[0].name;
            console.log(latestTag);
            core.setOutput('latest_tag', latestTag);
      - name: Get latest release
        id: latest_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: '${{ steps.latest-tag.outputs.latest_tag }}'
      - run: |
          echo '${{ steps.latest_release.outputs.body }}' >  new-file-feature-1.txt
          sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\n/g' -e 's/^/"/' -e 's/$/"/' new-file-feature-1.txt > new-file-feature.txt
          cat new-file-feature.txt
      - name: Read file contents
        id: read-file-contents
        run: echo "::set-output name=file-features::$(cat new-file-feature.txt)"

      - name: Notify Release via Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "Version": "${{ steps.latest-tag.outputs.latest_tag }}",
              "Repository": "${{ github.event.repository.name }}",
              "Product": "Drive",
              "Platform": "Web",
              "Support_Platforms": "Chrome, Firefox, Safari and Brave",
              "Description": ${{ steps.read-file-contents.outputs.file-features }}
              
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

